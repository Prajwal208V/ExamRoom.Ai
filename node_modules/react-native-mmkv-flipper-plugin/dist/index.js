let FlipperModule;
try {
    FlipperModule = require("react-native-flipper");
}
catch {
    // noop
}
let currentConnection = null;
export const initializeMMKVFlipper = (instances) => {
    if (FlipperModule == null) {
        throw new Error("Please install the 'react-native-flipper' package in your project to use Flipper integration for 'react-native-mmkv'");
    }
    const { addPlugin } = FlipperModule;
    if (currentConnection === null) {
        addPlugin({
            getId: () => "rn-mmkv",
            onConnect(connection) {
                currentConnection = connection;
                const data = Object.entries(instances).reduce((instancesDict, [name, instance]) => ({
                    ...instancesDict,
                    [name]: instance
                        .getAllKeys()
                        .reduce((instanceDict, key) => ({
                        ...instanceDict,
                        [key]: instance.getString(key) ?? null,
                    }), {}),
                }), {});
                connection.send("mmkv-data", data);
                Object.entries(instances).forEach(([name, instance]) => {
                    instance.addOnValueChangedListener((key) => {
                        currentConnection?.send("mmkv-key", {
                            key,
                            value: instance.getString(key),
                            instance: name,
                        });
                    });
                });
                connection.receive("mmkv-remove-key", ({ key, instance }) => {
                    instances[instance].delete(key);
                });
                connection.receive("mmkv-set", ({ key, value, instance }) => {
                    instances[instance].set(key, value);
                });
                connection.receive("mmkv-remove-all", (instance) => {
                    instances[instance].clearAll();
                });
            },
            onDisconnect() {
                currentConnection = null;
            },
            runInBackground: () => false,
        });
    }
};
